CREATE TABLE `NodeType` (
	`Id`	INTEGER NOT NULL PRIMARY KEY,
	`Name`	TEXT NOT NULL
);

INSERT INTO `NodeType`(`Id`,`Name`) VALUES (1, 'Project');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (2, 'Requirement Group');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (3, 'Requirement Item');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (4, 'Architecture Group');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (5, 'Architecture Item');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (6, 'Design Group');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (7, 'Design Item');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (8, 'Test Case Group');
INSERT INTO `NodeType`(`Id`,`Name`) VALUES (9, 'Test Case Item');

CREATE TABLE `Node` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Parent`	INTEGER,
	`Type`	INTEGER NOT NULL,
	FOREIGN KEY(`Parent`) REFERENCES `Node`(`Id`),
	FOREIGN KEY(`Type`) REFERENCES `NodeType`(`Id`)
);

CREATE TABLE `Revision` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Timestamp`	TEXT,
	`User`	INTEGER NOT NULL,
	FOREIGN KEY(`User`) REFERENCES `User`(`Id`)
);

CREATE TABLE `UserGroupType` (
	`Id`	INTEGER NOT NULL PRIMARY KEY,
	`Name`	TEXT NOT NULL
);

INSERT INTO `UserGroupType`(`Id`,`Name`) VALUES (1, 'Administrator');
INSERT INTO `UserGroupType`(`Id`,`Name`) VALUES (2, 'User');

CREATE TABLE `UserGroup` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Name`	TEXT,
	`Type`	INTEGER NOT NULL,
	FOREIGN KEY(`Type`) REFERENCES `UserGroupType`(`Id`)
);

CREATE TABLE `User` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Group`	INTEGER NOT NULL,
	`Name`	TEXT NOT NULL,
	`Description`	TEXT,
	`Password`	TEXT NOT NULL,
	FOREIGN KEY(`Group`) REFERENCES `UserGroup`(`Id`)
);

CREATE TABLE `NodeName` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Text`	TEXT NOT NULL
);

CREATE TABLE `NodeDescription` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Text`	TEXT NOT NULL
);

CREATE TABLE `NodeReference` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Reference`	INTEGER NOT NULL,
	FOREIGN KEY(`Reference`) REFERENCES `Node`(`Id`)
);

CREATE TABLE `NodeReferenceList` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT
);

CREATE TABLE `NodeReferenceItem` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`List`	INTEGER NOT NULL,
	`Reference`	INTEGER NOT NULL,
	FOREIGN KEY(`List`) REFERENCES `NodeReferenceList`(`Id`),
	FOREIGN KEY(`Reference`) REFERENCES `NodeReference`(`Id`)
);

CREATE TABLE `NodeAttachment` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`FileName`	TEXT NOT NULL,
	`FileData`	BLOB NOT NULL
);

CREATE TABLE `NodeAttachmentList` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT
);

CREATE TABLE `NodeAttachmentItem` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`List`	INTEGER NOT NULL,
	`Attachment`	INTEGER NOT NULL,
	FOREIGN KEY(`List`) REFERENCES `NodeAttachmentList`(`Id`),
	FOREIGN KEY(`Attachment`) REFERENCES `NodeAttachment`(`Id`)
);

CREATE TABLE `NodeComment` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Text`	TEXT NOT NULL
);

CREATE TABLE `NodeCommentList` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT
);

CREATE TABLE `NodeCommentItem` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`List`	INTEGER NOT NULL,
	`Comment`	INTEGER NOT NULL,
	FOREIGN KEY(`List`) REFERENCES `NodeCommentList`(`Id`),
	FOREIGN KEY(`Comment`) REFERENCES `NodeComment`(`Id`)
);

CREATE TABLE `NodeAttributes` (
	`Id`	INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
	`Node`	INTEGER NOT NULL,
	`Revision`	INTEGER NOT NULL,
	`Name`	INTEGER NOT NULL,
	`Description`	INTEGER,
	`References`	INTEGER,
	`Attachments`	INTEGER,
	`IsActive`	INTEGER NOT NULL CHECK(`IsActive` IN (0, 1)),
	FOREIGN KEY(`Node`) REFERENCES `Node`(`Id`),
	FOREIGN KEY(`Revision`) REFERENCES `Revision`(`Id`),
	FOREIGN KEY(`Name`) REFERENCES `NodeName`(`Id`),
	FOREIGN KEY(`Description`) REFERENCES `NodeDescription`(`Id`),
	FOREIGN KEY(`References`) REFERENCES `NodeReferenceList`(`Id`),
	FOREIGN KEY(`Attachments`) REFERENCES `NodeAttachmentList`(`Id`)
);

